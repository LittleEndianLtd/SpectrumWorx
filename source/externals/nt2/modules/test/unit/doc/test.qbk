[section Test Suite and Test Case]

This section will give a short overview of the __NT2__ Unit Test definition
rationale and go over the structure of a simple test.

[section What's a Test Suite ?]
A __NT2__ test suite is a set of at least one test case function.
The smallest __NT2__ test is a C++ source file including:

[import source/test.cpp]
[test]

[endsect]

[section What's a Test Case ?]
Test cases are function performing repeatable, minimal operations able to
unambiguously capture a function or class behavior and assess its correctness.

In __NT2__, a test case can be defined either as:

* a single function defined by the [macroref NT2_TEST_CASE] macro. In this case,
  the test function will be run and proceed to every tests it contains.
  [c++]
  ``
  #define NT2_MODULE "A sample test"
  #include <iostream>
  #include <nt2/sdk/unit/module.hpp>

  NT2_TEST_CASE(my_test)
  {
    std::cout << "nothing special here ..." << std::endl;
  }
  ``

* a familly of functions generated from a template function and a list of types
  passed as a Boost.Preprocessor sequence via the [macroref NT2_TEST_CASE_TPL]
  macro. Inside the test case itself, the current template type is accessible
  through the template parameter T.
  [c++]
  ``
  #define NT2_MODULE "A sample test"
  #include <nt2/sdk/unit/module.hpp>

  NT2_TEST_CASE_TPL(my_template_test, (double)(float)(char))
  {
    T value;
    std::cout << "nothing special here neither..." << std::endl;
  }
  ``

In both case, the test case name should be unique. Additionally, good testing
practices recommend to have fine grain test case to simplify test management.

After compiling and launching the test, you should end up with the following
output:

[import source/test.result.cpp]
[test_result]

The unit test output contains the name of the test actually run, its potential
output adn a global count of the total number of tests performed, the number of
passing tests and the number of failing tests.

In this case, unsurprisingly, our empty test fails as we consider an empty test
is probably an error in itself. __NT2__ enforces a [*no test is a failure] rule
that applies at the test case level. Any test case with no actual testing will
be considered as a failure. Every test functions then require at least one call to any
[link unit_test_framework.test_suite_and_test_case.testing_macros Testing Macros].

[endsect]

[section Testing Macros]
__NT2__ provides a set of macros to perform usual tests operations and reporting
their success or failure to the test suite manager directly from within a test
case.

[heading Basic Tests]
Those macros provide a way to test if an arbitrary expression evaluate to true
or to force a test failure or success.

They are accessible in the [headerref nt2/sdk/unit/tests/basic.hpp] file.

* [macroref NT2_TEST]
* [macroref NT2_TEST_ERROR]
* [macroref NT2_TEST_COMPLETE]

[heading Relational Tests]
Relational tests compares the equality, inequality or ordering of values. Test
is considered successful if values compares equal, non-equal or properly ordered.
Such tests include:

* [macroref NT2_TEST_EQUAL        ]
* [macroref NT2_TEST_NOT_EQUAL    ]
* [macroref NT2_TEST_LESSER       ]
* [macroref NT2_TEST_GREATER      ]
* [macroref NT2_TEST_LESSER_EQUAL ]
* [macroref NT2_TEST_GREATER_EQUAL]

They are accessible in the [headerref nt2/sdk/unit/tests/relation.hpp] file.

[heading Precision Tests]

These tests are intended to compare floating points results, allowing a third
parameter to state the admitted possible difference between the two quantities.
This difference is expressed in "ulps", that is units in the last place, that
is an indication of the number of floating points values that are representable
between the compared quantities[footnote see
[link unit_test_framework.rationale_on_precision_testing
Rationale on precision testing] for more details].

They are accessible in the [headerref nt2/sdk/unit/tests/ulp.hpp] file.

*[macroref NT2_TEST_ULP_EQUAL]

[heading Runtime Error Tests]
Those tests check if a given expression exhibit a given runtime behavior with
respect to exception or assertion triggers. Expression can be tested for being
able to throw or trigger an assertion and for not throwing nor triggering any
assertion. Those tests require the Unit Test to be compiled with exception
support and with the option [macroref NT2_ASSERTS_AS_EXCEPTIONS] defined
[footnote If the __NT2__ CMake script is used, creating a target as a test
will automatically set up the proper compilation flags.].

They are accessible in the [headerref nt2/sdk/unit/tests/exceptions.hpp] file.

* [macroref NT2_TEST_THROW    ]
* [macroref NT2_TEST_ASSERT   ]
* [macroref NT2_TEST_NO_THROW ]
* [macroref NT2_TEST_NO_ASSERT]

[heading Type Related Tests]

They are accessible in the [headerref nt2/sdk/unit/tests/type_expr.hpp] file.

Those tests check if a given type or type of expression is conformant to an
 expected one.

* [macroref NT2_TEST_EXPR_TYPE  ]
* [macroref NT2_TEST_TYPE_INFO  ]
* [macroref NT2_TEST_TYPE_IS    ]

Let's now complete our simple test by checking a very simple arithmetic axiom:

[import source/test.simple.cpp]
[test_simple]

[endsect]
[endsect]

[section Writing custom tests]
Macros provided by this module should cover the basic needs of any proper unit
test base. However, NT2.Test.Unit exposes its internal elements so custom test
protocol can be defined. This section will go over the various elements available
to do so.

[section Test status counters]
Tests failure and success are the biggest informations we have to handle while
writing a custom test protocol. Counters for the number of test and the number
of failured tests are available via the following functions from the
[headerref nt2/sdk/unit/stats.hpp] file:

* [funcref nt2::unit::error_count ]
* [funcref nt2::unit::test_count  ]

Those functions return mutable reference to the corresponding global counter.
As an example, the [macroref NT2_TEST ] macro is defined as :

[c++]
``
#define NT2_TEST(X)                                             \
( ::nt2::unit::test_count()++                                   \
, (X) ? ::nt2::unit::pass(#X)                                   \
      : ::nt2::unit::fail(#X, __LINE__, BOOST_CURRENT_FUNCTION) \
)                                                               \
``

We will go over [funcref nt2::unit::pass ]  and [funcref nt2::unit::fail] soon
but basically [macroref NT2_TEST ] increase the number of test and go over
checking if =X= is true.
[endsect]

[section Predefined testing functions]
To be able to fill these counter properly, we need to actually do some tests.
[headerref nt2/sdk/unit/stats.hpp] provides some predefined simple test functions:

* [funcref nt2::unit::pass  ]
* [funcref nt2::unit::fail  ]
* [funcref nt2::unit::error ]

[endsect]

[section Test building blocks]
[endsect]

[section Example: NT2_TEST_COMPARE_TO_FILE]
In this example, we'll build a test can compare the result of a function call
to the value stored in a file. This is a very simple example and making it a
complete working macro handling sequence and other fancy cases is left as an
exercise.

[endsect]

[endsect]


[section Rationale on precision testing]


["Are these two floating computations results similar enough ?]

This is maybe the most difficult question to answer when implementing and
validating numerical algorithms. Various methods are often found in existing
testing frameworks or are used by developers. But, in the same way floating-point
arithmetic can be tricky, floating-point comparisons are even trickier.

[note  In the rest of this section, we take for granted that the basic
notions of floating-point computations and their related problems is known by
the reader. If not, we strongly recommend having a deep look at
[@http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html Goldberg's paper
on the subject] or to [@http://floating-point-gui.de/ its simplified version].
]

[section Metric for precision measurement]
The first thing people learn (and often they learn it the hard way) is that strict
equality for floating points number is often meaningless or very hard to achieve.
Once this state of fact is integrated, people often goes to use a simple absolute
difference with an arbitrary threshold. If this method looks sound, it's easy to
fold and may lead to false positive. The proper way to compare non-zero or non-invalid
floating point numbers is to use the [*Unit in the Last Place] metric.

Let us define Eps(the machine epsilon)  as being the smallest positive floating point
number such that 1+EPS is different of 1 (for double precision floating number Eps is 2^(-52),
 2^(-23) for single precision). In fact 1+Eps and 1 only differs by a bit 1 in the
 least significant digit: the unit in the last place (ULP).

Generally, the ULP between a floating point number f and its immediate successor
(if f exponent is equal to E), is Eps x 2^E.

The IEEE 754 specification -followed by all modern floating-point hardware-
requires that the result of an elementary arithmetic operation (addition,
subtraction, multiplication, division, and square root) be within 0.5 ULP of the
mathematically exact result -that is, that it be the best possible result.
Achieving 0.5-1 ULP for computationally complex functions like transcendental functions is what
a proper numerical library should aim for, and that's what __NT2__ actually try
to achieve.

[endsect]

[section Computing ULP Distance]
The ULP distance (or =ulpdist=) is a way to compare floating-point numbers by
estimating the number of significant bits between their respective representations.
The full algorithm can be expressed in standard C++ in the following way:

[import source/ulpdist.cpp]
[ulpdist]

Put in an other way, one can estimate the =ulpdist= between two floating point
numbers as the number of representable floating points values between them. This
estimation leads to the following properties:

* The =ulpdist= between =N= and =N+N*Eps= is equal to =0.5=
* The =ulpdist= between =N= and =N+N*Eps/2= is equal to =0=
* If a =double= is compared to the double representation of its single precision
  conversion (they are exceptions as for fully representable reals), their
 =ulpdist= will be around 2^26.5 (~10^8). For example, =ulpdist(double(Pi<float>()),Pi<double>())=
 is equal to =9.84293e+07=

[endsect]

[section Taking ULP in consideration in your tests]
What to do then when writing an unit test that handles floating points number ?
You basically have two cases :

* The value you compare must be equal by design. In this case, use
[macroref NT2_TEST_EQUAL] to clearly state your intent. One such case can be
for example functions that construct a floating point value bitwise (like for
example =ldexp=).
* The value you compare are the results of an undetermined number of other
floating point operations. In this case, use [macroref NT2_TEST_ULP_EQUAL] and
try to estimate the maximum amount of ULP your implementation should give. This
can be either done by a strict analysis of the function behavior or by some guess
work.

[endsect]

[endsect]
