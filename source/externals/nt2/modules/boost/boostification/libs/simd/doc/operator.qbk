[section:operator Operator Toolbox]

The operator toolbox provides support for operators acting quite the same as usual C++ operators.

The main difference is that except the compare_x...x ones that return boolean (and so scalar) value
the other always return a SIMD vector and have some input restrictions and ouput type differences from C++
that will be precised in or just after the following table:


[#compare_greater_equal]

[table
    [[C++ operator] [Function name] [Alias] [SIMD Description]]
    [[`a & b` ]     [bitwise_and  ] [b_and] [Returns a vector of the type of its first parameter.]]
    [[`a | b` ]     [bitwise_or   ] [b_or ] [Returns a vector of the type of its first parameter.]]
    [[`a ^ b` ]     [bitwise_xor  ] [b_xor] [Returns a vector of the type of its first parameter.]]
    [[`a == b`]     [compare_equal]         [compare_eq]         [Returns a boolean. Semantic is `all(is_equal(a,b))`.]]
    [[`a >= b`]     [compare_greater_equal] [compare_greater_eq] [Returns a boolean. Semantic is `!(a<b)` (even for floating values).]]
    [[`a > b` ]     [compare_greater]       [compare_gt]         [Returns a boolean. The comparison is done in lexicographical order.]]
    [[`a <= b`]     [compare_less_equal]    [compare_less_eq]    [Returns a boolean. Semantic is `!(a>b)` (even for floating values).]]
    [[`a > b` ]     [compare_less ]         [compare_lt]         [Returns a boolean. The comparison is done in lexicographical order.]]
    [[`a != b`]     [compare_not_equal]     [compare_neq]        [Returns a boolean. Semantic is `any(is_not_equal(a,b))`]]
    [[`~a`]         [complement]            [not]                [Returns a vector of same the type, bit complemented]]
    [[`a ? b : c` ] [if_else      ] [where] [`b` an `c` must be of the same type which is the return type.`a` must share the same element size and its a 'SIMD logical value' used for masking ]]
    [[n/a]          [is_equal        ] [eq]    [Performs an elementwise comparison and returns a SIMD logical vector.]]
    [[n/a]          [is_greater_equal] [ge]    [Performs an elementwise comparison and returns a SIMD logical vector.]]
    [[n/a]          [is_greater      ] [gt]    [Performs an elementwise comparison and returns a SIMD logical vector.]]
    [[n/a]          [is_less_equal   ] [le]    [Performs an elementwise comparison and returns a SIMD logical vector.]]
    [[n/a]          [is_less         ] [lt]    [Performs an elementwise comparison and returns a SIMD logical vector.]]
    [[n/a]          [is_not_equal    ] [neq, ne] [Performs an elementwise comparison and returns a SIMD logical vector.]]
    [[`a && b`]     [logical_and  ] [l_and] [Performs an elementwise `&&` and returns a SIMD logical vector.]]
    [[`!a` ]        [logical_not  ] [l_not] [Performs an elementwise '!' and returns a SIMD logical logical vector.]]
    [[`a || b`]     [logical_or   ] [l_xor] [Performs an elementwise `||` and returns a new SIMD logical vector.]]
    [[`a - b` ]     [minus        ] [sub]   [Returns a vector of holding the result of the subtraction done elementwise.]]
    [[`a + b` ]     [plus         ] [add]   [Returns a vector holding the result of the addition done elementwise.]]
    [[`a * b` ]     [multiplies   ] [mul]   [Returns a vector holding the result of the multiplication done elementwise.]]
    [[`a / b` ]     [divides      ] [div, rdiv] [Returns a vector holding the result of the division done elementwise.]]
    [[`a % b` ]     [modulo       ] [n/a]   [Returns a variable holding the result of the modulo operation done elementwise.]]
    [[`-a` ]        [unary_minus  ] [neg]   [Returns a variable holding the result of the unary minus operation done elementwise.]]
    [[`+a` ]        [unary_plus   ] [identity, id]   [Returns the input]]
    [[`a << b`]     [shift_left   ] [shl]   [Performs an elementwise `<<` and returns a SIMD vector]]
    [[`a >> b`]     [shift_right  ] [shr]   [Performs an elementwise `>>` and returns a SIMD vector]]
]

Restrictions in SIMD and rationale

   * &, |, ^ only accept two vectors of same elements size and return a result of the type of the first argument
     The rationale for these operator to be non-commutative is that in SIMD programming they are hugely used
     with the second element being considered as a mask to be applied to the first.
   * << and >> need an integer vector as second argument and the two vectors must share the same elements size
     It must be noted that there exists other shift operators (for instance shli and shri for which the second
     parameter is always a scalar integer and that perform the same shift on all elements of the first vector parameter:
     these can have a much better performance peculiarly on Intel processors)
   * The other binary operators only accept two arguments of the same type and return and argument of this type.
     For integer vectors there is no promotion of the result.
     Rationale is that contrarily to the scalar case the SIMD basic operations do not provide any automatic promotion
     or casting, this being peculiarly important for vector having different element sizes and consequently different elements
     number.
     Adding  a vector of 4 float to a vector of 8 short is senseless.
     Adding a vector of 4 float to a vector of 4 int could be thought to carry sense but it would result in possibly
     non efficient operations and is left to the user responsability that can do: a+tofloat(b)
   * integer vector / has a saturating comportment when one of the denominator is 0 the result is the minimum
     or maximum value of the type and 0/0 is zero (do not forget that between scalars integers this is not the C/C++ rule)
     Rationale is that division must not fail (with gcc and ints 1/0 raise a floating point exception (!)) because there
     are several scalar division involved.
     As for floating entries (say double) 1.0/0.0 == inf -1.0/0.0 == -inf and 0.0/0.0 == nan, we choose to say that
     dividing by zero will lead the maximum (resp. minimum) value in the element type when dividing a postive (resp. negative)
     integer. The 0/0 case was driven by the fact that in C int(Nan) is 0.
   * % as in scalar does not work for floating vectors.


Note:

Be sure to understand that in using integer SIMD vectors, NO internal promotion is made.

d=(a+b)+c for vectors of char is not treated as in scalar C++ where the computation is done in int then clipped to the result variable type:
each operation can lead to overflow.

For sanity, you are engaged to use the saturated operators/functions provided: adds, subs, muls,divs
that saturate the result instead of performing modulo computations.

[section load]

[h5 Description]
Load data from a memory block and an offset.

[h5 Synopsis]
    namespace boost { namespace simd
    {
      template<class T, class P,class O>               T load(P const& ptr, O const& offset );
      template<std::size_t N,class T, class P,class O> T load(P const& ptr, O const& offset );
    } }


[table Template Parameters
    [[Parameter] [Requirement] [Description]]
    [[N]         [Integer constant] [Local memory offset]]
    [[T]         [None]        [Type to load]]
]

[table Parameters
    [[Parameter] [Description]]
    [[ptr]       [Base address of the memory block to load]]
    [[offset]    [Offset of the memory block to load]]
]

[h5 Header]
   #include <boost/simd/toolbox/operator/aligned_load.hpp>

[h5 Expression Semantics]
    aligned_load<T>(ptr, offset);
[*Return type: ] T

[*Semantics:   ] Returns an instance of T containing the data loaded from the address `ptr + offset`.

    aligned_load<T, N>(ptr, offset);
[*Return type: ] T

[*Semantics:   ] Returns an instance of T containing the data loaded from the address `ptr + offset + N`.

[h5 Example]

[endsect]


[section map]

[h5 Description]
Apply a functor on every element of a SIMD register.

[h5 Synopsis]
    namespace boost { namespace simd
    {
      template<class Func, class... An> __unspecified__ aligned_storeFunc const& f, Args const& ... an);
    } }


[table Template Parameters
    [[Parameter] [Requirement] [Description]]
    [[Func]      [None]        [Type of the functor]]
    [[An]        [None]        []]
]

[table Parameters
    [[Parameter] [Description]]
    [[f]         [Functor instance]]
    [[an]        []]
]

[h5 Header]
   #include <boost/simd/toolbox/operator/map.hpp>

[h5 Expression Semantics]

[*Return type: ]

[*Semantics:   ]

[h5 Example]

[endsect]


[section splat]

[h5 Description]
Initialize a variable with a given value.

[h5 Synopsis]
    namespace boost { namespace simd
    {
      template<class T, class A0> T splat(A0 const& a0);
    } }

[table Template Parameters
    [[Parameter] [Requirement] [Description]]
    [[T]         [None]        [Type of the variable to initialize]]
    [[A0]        [None]        [Type of the variable to initialize from]]
]

[table Parameters
    [[Parameter] [Description]]
    [[a0]        [Variable to initialize from]]
]

[h5 Header]
   #include <boost/simd/toolbox/operator/splat.hpp>

[h5 Expression Semantics]
    splat<T>(a);

[*Return type: ] T

[*Semantics:   ] Return an instance of T initialized with a.

[h5 Example]

[endsect]


[section store]

[h5 Description]
Store data into a memory block from an address and an offset.

[h5 Synopsis]
    namespace boost { namespace simd
    {
      template<class Value, class Ptr,class Offset>
      Value aligned_storeValue const& v, Ptr const& ptr, Offset const& o);
    } }


[table Template Parameters
    [[Parameter] [Requirement] [Description]]
    [[Value]         [None]    [Type to store]]
    [[Ptr]           [None]    [Address type]]
    [[Offset]        [None]    [Offset type]]
]

[table Parameters
    [[Parameter] [Description]]
    [[v]         [Value to store into memory]]
    [[ptr]       [Base address of the memory block to store]]
    [[o]         [Offset of the memory block to store]]
]

[h5 Header]
   #include <boost/simd/toolbox/operator/aligned_store.hpp>

[h5 Expression Semantics]
    aligned_storevalue, ptr, offset);
[*Return type: ] Type of value

[*Semantics:   ] Returns the instance of T that was stored at the address `ptr + offset`.

[h5 Example]

[endsect]

[endsect]
