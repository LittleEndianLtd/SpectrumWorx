[section SDK]

[section pack]
`pack` is the basic building brick of the boost.simd framework. It provides an abstraction of a
SIMD register and provides software emulation in case no such registers exist on the machine.

Here is the forward declaration of the `pack<>` class template :

  template< class Type
          , std::size_t Cardinal  = meta::native_cardinal<Type>::value
          >
  struct pack;

The template parameters are described bellow :

[variablelist
  [[`Type`] [The type of the data to store in the pack]]
  [[`Cardinal`] [The cardinal (optional), that is the number of elements, to be stored in the pack]]
]

In case the cardinal is not specified, the best fit is automatically choosen depending on the size of
the SIMD registers and the size of the type stored, that is following the formula :

   BOOST_SIMD_BYTES / sizeof(Type);

`BOOST_SIMD_BYTES` being the size of the SIMD registers in bytes.

In case the specified cardinal doesn't fit in a SIMD register, `pack<>` falls back to a software
implementation based on a `boost::array<Type, Cardinal>`.

As a convenience the `pack<>` class can be constructed from a `Type` value, so we can write :

    boost::simd::pack<int> p(4);

This will effectively load the value 4 into the register using the appropriate intrinsic.

[h3 Element Access]
`pack<>` exposes an iterator interface, with `begin()` and `end()` member functions returning random access
iterators respectively pointing to the first element and to the past-the-end element of the `pack` :

    iterator        begin();
    iterator        end();
    const_iterator  begin()  const;
    const_iterator  end()    const;

The pack class also overloads the subscript operator to give random access to its elements (with write support) :

    reference        operator[](int i);
    const_reference  operator[](int i) const;

[caution Accessing one element of a SIMD register is a relatively slow operation.]

[h3 Streaming support]
boost.simd overloads the shift left (insertion to stream) operator, giving you the ability to print the inner
state of a `pack` :

   boost::simd::pack<int> p(4);
   std::cout << p;

prints (assuming a 128 bits size SIMD register) :

[pre
{4,4,4,4}
]

These overload is accessible by including :

   #include <boost/simd/sdk/simd/pack/io.hpp>


[endsect]

[section SIMD Iterator]
The library provides SIMD iterators :

    template<class T, std::size_t C = meta::native_cardinal<T>::value >
    struct  iterator

referencing pack of C elements of type T. Those iterators are read only and support
random access operations.

In addition to these iterators, two functions are provided, namely `begin` and `end` constructing
SIMD iterators from a contiguous range.
The `begin` function takes a range and returns a `boost::simd::iterator<>` pointing to the first aligned
address after the start of the range. Another version of this function exists, taking a cardinal as a template
parameter. (By default it uses the native cardinal of the range value_type).
The `end` function also takes a range and returns a `boost::simd::iterator<>` pointing to the first aligned address
before the end of the range. Similarly another version of this function exists taking a cardinal.

Those functions are accessible by including :

   #include <boost/simd/sdk/simd/begin.hpp>
   #include <boost/simd/sdk/simd/end.hpp>

Finally boost.simd provides a function to create a range (cleverly named `range`), composed of the begin and end iterators,
from a contiguous range.
This range covers the inner part of the original range that supports SIMD operation. Similarly to the `begin` and `end` functions
two versions exist, and are defined in :

   #include <boost/simd/sdk/simd/range.hpp>
[endsect]

[section Memory]
When dealing with SIMD registers, the memory needs to be aligned in order to achieve good performances. To achieve this goal, boost.simd
provides a set of tool to allocate aligned memory.
First the `allocate` function, defined in boost/simd/memory/allocate.hpp :

   byte* allocate( std::size_t nbytes );

allocates a buffer of nbytes bytes starting at an aligned address.

Obviously `deallocate` and `reallocate` counterparts are also available :

   void deallocate( byte* ptr, std::size_t nbytes = 0);
   byte* reallocate( byte* ptr, std::size_t nbytes );

All this functions live in the boost::simd::memory namespace.

Lastly, an allocator, `boost::simd::allocator<>` is provided, which uses internally the above memory handling related functions.
This means that you can use it with an STL container to get automatically aligned ranges :

   std::vector<int, simd::allocator<int> > vec(9, 9);

`vec` will start at an aligned address meaning that you can immediately applicate SIMD operations on it without using boost::simd::begin
function.
This allocator is defined in boost/simd/memory/allocator.hpp.

An allocator adaptator is also available for you to adapt an allocator to be aligned, it is named `allocator_adaptor`.
[endsect]
[endsect]
