[section SDK]

[section pack]
`pack` is the basic buidling brick of the boost.simd framework. It provides an abstraction of a
SIMD register and provides software emulation in case no such registers exist on the machine.

Here is the forward declaration of the `pack<>` class template :

  template< class Type
          , std::size_t Cardinal  = meta::native_cardinal<Type>::value
          >
  struct pack;

The template parameters are described bellow :

[variablelist
  [[`Type`] [The type of the data to store in the pack]]
  [[`Cardinal`] [The cardinal (optional), that is the number of elements, to be stored in the pack]]
]

In case the cardinal is not specified, the best fit is automatically choosen depending on the size of
the SIMD registers and the size of the type stored, that is following the formula :

   BOOST_SIMD_BYTES / sizeof(Type);

`BOOST_SIMD_BYTES` being the size of the SIMD registers in bytes.

In case the specified cardinal doesn't fit in a SIMD register `pack<>` falls back to a software
implementation based on a `boost::array<Type, Cardinal>`



[endsect]
