[section Standard Operators]

The base.operator toolbox provides support for operators acting quite the same as
usual C++ operators.

[table
    [[C++ operator] [Function name] [Note]]
    [[`-a` ]        [funcref boost::simd::unary_minus      `unary_minus     `]    []]
    [[`+a` ]        [funcref boost::simd::unary_plus       `unary_plus      `]    []]
    [[`~a`]         [funcref boost::simd::complement       `complement      `]    []]
    [[`!a` ]        [funcref boost::simd::logical_not      `logical_not     `]    [Returns a SIMD logical vector.]]
    [[`a && b`]     [funcref boost::simd::logical_and      `logical_and     `]    [Returns a SIMD logical vector.]]
    [[`a || b`]     [funcref boost::simd::logical_or       `logical_or      `]    [Returns a SIMD logical vector.]]
    [[`a == b`]     [funcref boost::simd::is_equal         `is_equal        `]    [Returns a SIMD logical vector.]]
    [[`a >= b`]     [funcref boost::simd::is_greater_equal `is_greater_equal`]    [Returns a SIMD logical vector.]]
    [[`a > b` ]     [funcref boost::simd::is_greater       `is_greater      `]    [Returns a SIMD logical vector.]]
    [[`a <= b`]     [funcref boost::simd::is_less_equal    `is_less_equal   `]    [Returns a SIMD logical vector.]]
    [[`a > b` ]     [funcref boost::simd::is_less          `is_less         `]    [Returns a SIMD logical vector.]]
    [[`a != b`]     [funcref boost::simd::is_not_equal     `is_not_equal    `]    [Returns a SIMD logical vector.]]
    [[`a & b` ]     [funcref boost::simd::bitwise_and      `bitwise_and     `]    [Can mix real and integers of same cardinal]]
    [[`a | b` ]     [funcref boost::simd::bitwise_or       `bitwise_or      `]    [Can mix real and integers of same cardinal]]
    [[`a ^ b` ]     [funcref boost::simd::bitwise_xor      `bitwise_xor     `]    [Can mix real and integers of same cardinal]]
    [[`a - b` ]     [funcref boost::simd::minus            `minus           `]    []]
    [[`a + b` ]     [funcref boost::simd::plus             `plus            `]    []]
    [[`a * b` ]     [funcref boost::simd::multiplies       `multiplies      `]    []]
    [[`a / b` ]     [funcref boost::simd::divides          `divides         `]    []]
    [[`a % b` ]     [funcref boost::simd::modulo           `modulo          `]    []]
    [[`a << b`]     [funcref boost::simd::shift_left       `shift_left      `]    []]
    [[`a >> b`]     [funcref boost::simd::shift_right      `shift_right     `]    []]
    [[`a ? b : c` ] [funcref boost::simd::if_else          `if_else         `]    [`b` an `c` must be of the same type.`a` must share the same cardinal]]
]

[endsect]
