//==============================================================================
//         Copyright 2003 - 2012   LASMEA UMR 6602 CNRS/Univ. Clermont II
//         Copyright 2009 - 2012   LRI    UMR 8623 CNRS/Univ Paris Sud XI
//
//          Distributed under the Boost Software License, Version 1.0.
//                 See accompanying file LICENSE.txt or copy at
//                     http://www.boost.org/LICENSE_1_0.txt
//==============================================================================
#include <nt2/elliptic/include/functions/ellipj.hpp>

#include <nt2/include/constants/zero.hpp>
#include <nt2/include/constants/one.hpp>
#include <nt2/include/constants/half.hpp>
#include <nt2/include/constants/two.hpp>
#include <nt2/include/constants/pio_2.hpp>
#include <nt2/include/constants/inf.hpp>
#include <nt2/include/constants/nan.hpp>
#include <nt2/include/constants/eps.hpp>
#include <nt2/include/constants/i.hpp>
#include <nt2/include/functions/reshape.hpp>
#include <nt2/include/functions/cons.hpp>
#include <nt2/include/functions/colon.hpp>
#include <boost/dispatch/functor/meta/call.hpp>
#include <boost/fusion/include/vector_tie.hpp>
#include <nt2/table.hpp>
#include <nt2/sdk/complex/complex.hpp>
#include <nt2/sdk/unit/module.hpp>
#include <nt2/sdk/unit/tests/ulp.hpp>
#include <nt2/sdk/unit/tests/type_expr.hpp>
#include <boost/fusion/tuple.hpp>
#include <boost/fusion/include/vector_tie.hpp>

NT2_TEST_CASE_TPL ( ellipj_real__1_0,  NT2_REAL_TYPES)
{

  using nt2::ellipj;
  using nt2::tag::ellipj_;
  using nt2::table;
  using boost::fusion::tuple;
  typedef typename std::complex<T> cT;

  T u[] = {nt2::Zero<T>(), nt2::Half<T>(),nt2::One<T>(), nt2::Pio_2<T>()/2,  nt2::Two<T>()};
  T m[] = {T(0), T(0.25), T(0.5), T(0.75), T(1)};
  size_t N =  sizeof(u)/sizeof(T);
  size_t M =  sizeof(m)/sizeof(T);
  table<T> sn = nt2::reshape(nt2::cons<T>(
             0.000000000000000e+00, 4.794255386042030e-01, 8.414709848078965e-01, 7.071067811865475e-01,9.092974268256817e-01,
             0.000000000000000e+00, 4.750829360285365e-01, 8.226355781298623e-01, 6.944338503146916e-01,9.628981775982776e-01,
             0.000000000000000e+00, 4.707504736556574e-01, 8.030018248956439e-01, 6.816492236157433e-01,9.946623253580177e-01,
             0.000000000000000e+00, 4.664284498036358e-01, 7.826328478392893e-01, 6.687652630114191e-01,9.969206618889346e-01,
             0.000000000000000e+00, 4.621171572600097e-01, 7.615941559557649e-01, 6.557942026326724e-01,9.640275800758169e-01
                       ), 5, 5);
  table<T> cn = nt2::reshape(nt2::cons<T>(
             1.000000000000000e+00, 8.775825618903728e-01, 5.403023058681398e-01, 7.071067811865476e-01,-4.161468365471424e-01,
             1.000000000000000e+00, 8.799410229637583e-01, 5.685689980951715e-01, 7.195565492281426e-01,-2.698649654510863e-01,
             1.000000000000000e+00, 8.822663948904402e-01, 5.959765676721407e-01, 7.316791208884222e-01,-1.031836155277620e-01,
             1.000000000000000e+00, 8.845589303227780e-01, 6.224835945492571e-01, 7.434736195651245e-01,7.841679602565166e-02,
             1.000000000000000e+00, 8.868188839700740e-01, 6.480542736638853e-01, 7.549397087141313e-01,2.658022288340797e-01
                       ), 5, 5);
  table<T> dn = nt2::reshape(nt2::cons<T>(
             1.000000000000000e+00, 1.000000000000000e+00, 1.000000000000000e+00, 1.000000000000000e+00,1.000000000000000e+00,
             1.000000000000000e+00, 9.713773988381789e-01, 9.114920056691319e-01, 9.377848404001198e-01,8.764740583123262e-01,
             1.000000000000000e+00, 9.429724257773857e-01, 8.231610016315963e-01, 8.761718826645986e-01,7.108610477840873e-01,
             1.000000000000000e+00, 9.147859727336952e-01, 7.352648292365296e-01, 8.152084195112012e-01,5.045908197977806e-01,
             1.000000000000000e+00, 8.868188839700740e-01, 6.480542736638853e-01, 7.549397087141313e-01,2.658022288340797e-01
                       ), 5, 5);
 table<T> sni = nt2::reshape(nt2::cons<T>(
    0.000000000000000e+00,    5.210953054937473e-01,    1.175201193643801e+00,    8.686709614860095e-01,    3.626860407847018e+00,
    0.000000000000000e+00,    5.273005944707774e-01,    1.257274657022884e+00,    8.995144486802316e-01,    1.271310117749293e+01,
    0.000000000000000e+00,    5.335695390666162e-01,    1.347371471385419e+00,    9.316231721742565e-01,    -9.639731271971169e+00,
    0.000000000000000e+00,    5.399031567233835e-01,    1.446852679069504e+00,    9.650858588662702e-01,    -3.568074040247381e+00,
    0.000000000000000e+00,    5.463024898437905e-01,    1.557407724654902e+00,    9.999999999999998e-01,    -2.185039863261519e+00
                       ), 5, 5);
  table<T> cni = nt2::reshape(nt2::cons<T>(
    1.000000000000000e+00,    1.127625965206381e+00,    1.543080634815244e+00,    1.324609089252006e+00,    3.762195691083631e+00,
    1.000000000000000e+00,    1.130506929182318e+00,    1.606468039891243e+00,    1.345037636419331e+00,    1.275237003655289e+01,
    1.000000000000000e+00,    1.133444508134281e+00,    1.677918318006961e+00,    1.366719332903440e+00,    -9.691461138333006e+00,
    1.000000000000000e+00,    1.136439799830979e+00,    1.758801488210253e+00,    1.389744838084908e+00,    -3.705556956341013e+00,
    1.000000000000000e+00,    1.139493927324549e+00,    1.850815717680925e+00,    1.414213562373095e+00,    -2.402997961722381e+00
                       ), 5, 5);
  table<T> dni = nt2::reshape(nt2::cons<T>(
    1.000000000000000e+00,    1.000000000000000e+00,    1.000000000000000e+00,    1.000000000000000e+00,    1.000000000000000e+00,
    1.000000000000000e+00,    1.034171880894230e+00,    1.181179449024577e+00,    1.096486005768485e+00,    6.434728851108876e+00,
    1.000000000000000e+00,    1.068806917319438e+00,    1.381196923306613e+00,    1.197481050984111e+00,    -6.889282219354165e+00,
    1.000000000000000e+00,    1.103911936695996e+00,    1.603133496062618e+00,    1.303281641180345e+00,    -3.247824543831678e+00,
    1.000000000000000e+00,    1.139493927324549e+00,    1.850815717680925e+00,    1.414213562373095e+00,    -2.402997961722381e+00
                       ), 5, 5);


  table<cT> sn2 = nt2::reshape(nt2::cons<cT>(
             cT(0.000000000000000e+00, 0.000000000000000e+00), cT(5.406126857131534e-01, 4.573041531842492e-01), cT(1.298457581415977e+00, 6.349639147847361e-01), cT(9.366400694314299e-01, 6.142431274865956e-01), cT(3.420954861117013e+00, -1.509306485323615e+00),
             cT(0.000000000000000e+00, 0.000000000000000e+00), cT(5.468580813986395e-01, 4.437507186502655e-01), cT(1.231601995510548e+00, 5.140923301540307e-01), cT(9.331359410561183e-01, 5.530352156319751e-01), cT(2.054268494745150e+00, -7.817947692296125e-02),
             cT(0.000000000000000e+00, 0.000000000000000e+00), cT(5.528432509835494e-01, 4.303298648362078e-01), cT(1.173901806233543e+00, 4.169559160032310e-01), cT(9.284002856398469e-01, 4.970231184089907e-01), cT(1.413973123824247e+00, 1.505437179108013e-02),
             cT(0.000000000000000e+00, 0.000000000000000e+00), cT(5.585808293827810e-01, 4.170443716948540e-01), cT(1.124912264196554e+00, 3.375748492717642e-01), cT(9.229406972945058e-01, 4.456838677230803e-01), cT(1.143788357571287e+00, -1.345926420976009e-02),
             cT(0.000000000000000e+00, 0.000000000000000e+00), cT(5.640831412674985e-01, 4.038964553160259e-01), cT(1.083923327338695e+00, 2.717525853195117e-01), cT(9.171523356672743e-01, 3.985368153383868e-01), cT(1.023835594570472e+00, -2.839295286823229e-02)
                       ), 5, 5);
  table<cT> cn2 = nt2::reshape(nt2::cons<cT>(
             cT(1.000000000000000e+00, 0.000000000000000e+00), cT(9.895848833999198e-01, -2.498263975004615e-01), cT(8.337300251311492e-01, -9.888977057628651e-01), cT(9.366400694314301e-01, -6.142431274865955e-01), cT(-1.565625835315743e+00, -3.297894836311236e+00),
             cT(1.000000000000000e+00, 0.000000000000000e+00), cT(9.794134022266232e-01, -2.477693955061903e-01), cT(7.206596209214625e-01, -8.785800138001253e-01), cT(8.818117306665146e-01, -5.852236009446782e-01), cT(-8.947322608687178e-02, -1.794968656015182e+00),
             cT(1.000000000000000e+00, 0.000000000000000e+00), cT(9.694194480233747e-01, -2.454097263640043e-01), cT(6.307958406694354e-01, -7.759488432842337e-01), cT(8.321973593616023e-01, -5.544795353045735e-01), cT(2.129130353835548e-02, -9.997733145036616e-01),
             cT(1.000000000000000e+00, 0.000000000000000e+00), cT(9.596068427269017e-01, -2.427587848047779e-01), cT(5.581087117990867e-01, -6.804088164221558e-01), cT(7.872766584440294e-01, -5.224844090541468e-01), cT(-2.770139300993669e-02, -5.557319698355014e-01),
             cT(1.000000000000000e+00, 0.000000000000000e+00), cT(9.499788676154948e-01, -2.398276309380881e-01), cT(4.983370305551869e-01, -5.910838417210450e-01), cT(7.465711007790552e-01, -4.895969997439970e-01), cT(-1.174751426614146e-01, -2.474541858207603e-01)
                       ), 5, 5);
  table<cT> dn2 = nt2::reshape(nt2::cons<cT>(
             cT(1.000000000000000e+00, 0.000000000000000e+00), cT(1.000000000000000e+00, 0.000000000000000e+00), cT(1.000000000000000e+00, 0.000000000000000e+00), cT(1.000000000000000e+00, 0.000000000000000e+00), cT(1.000000000000000e+00, 0.000000000000000e+00),
             cT(1.000000000000000e+00, 0.000000000000000e+00), cT(9.890539199802501e-01, -6.133858370057250e-02), cT(8.494614403185510e-01, -1.863407535770357e-01), cT(9.368774931605083e-01, -1.377066479190957e-01), cT(1.466307315073729e-01, 2.738198785607563e-01),
             cT(1.000000000000000e+00, 0.000000000000000e+00), cT(9.770346754924617e-01, -1.217484739481982e-01), cT(7.171817180029394e-01, -3.412421779789067e-01), cT(8.731408260670284e-01, -2.642393937636650e-01), cT(-1.042703772524054e-01, 1.020734635740188e-01),
             cT(1.000000000000000e+00, 0.000000000000000e+00), cT(9.639933894797105e-01, -1.812406030785614e-01), cT(6.008797217717468e-01, -4.739826552688544e-01), cT(8.095313587476601e-01, -3.810906537508245e-01), cT(-1.562323360135071e-01, -7.390219318906825e-02),
             cT(1.000000000000000e+00, 0.000000000000000e+00), cT(9.499788676154948e-01, -2.398276309380881e-01), cT(4.983370305551869e-01, -5.910838417210450e-01), cT(7.465711007790552e-01, -4.895969997439970e-01), cT(-1.174751426614146e-01, -2.474541858207603e-01)
                       ), 5, 5);

  cT s, c, d;
  for(size_t i=1; i <= N; ++i)
  {
    for(size_t j=1; j <= M; ++j)
    {
      ellipj(cT(u[i-1]), m[j-1],nt2::Eps<T>(), s, c, d);
      NT2_TEST_ULP_EQUAL(s, cT(sn(i, j)), 13);
      NT2_TEST_ULP_EQUAL(c, cT(cn(i, j)), 13);
      NT2_TEST_ULP_EQUAL(d, cT(dn(i, j)), 13);
      ellipj(cT(0, u[i-1]), m[j-1],nt2::Eps<T>(), s, c, d);
      NT2_TEST_ULP_EQUAL(s, cT(0, sni(i, j)), 13);
      NT2_TEST_ULP_EQUAL(c, cT(cni(i, j)), 13);
      NT2_TEST_ULP_EQUAL(d, cT(dni(i, j)), 13);
      ellipj(cT(u[i-1], u[i-1]), m[j-1],nt2::Eps<T>(), s, c, d);
      NT2_TEST_ULP_EQUAL(s, sn2(i, j), 64);
      NT2_TEST_ULP_EQUAL(c, cn2(i, j), 64);
      NT2_TEST_ULP_EQUAL(d, dn2(i, j), 64);
    }
  }
}

