[section Exponential]

__NT2__  supports the __MATLAB__ schemes for exponential functions.
peculiarly  `reallog`, `realpow`, `realsqrt`.

However there is a difference between __NT2__ and __MATLAB__: these functions

# Do not compile for non real type parameters (including dry)
# Assert in the case of the parameters are of real type but do not allow a computation in real arithmetic.

On the other side, for  `log`, `pow`, `sqrt` and the other standard functions,
results in NT2 also depend of the types they are fed in (see the `complex` rationale ??).

# On complex types as `dry`, `imaginary` or `complex` they are computed using complex arithmetic,
# On `double` or `float` they return nan values if the computation cannot be done using real arithmetic.

To resume:

# With `double` or `float` inputs elements, they act as the real prefixed __MATLAB__
functions, but do not stop execution: for instance `sqrt(-1.0)` returns `Nan<double>()` value.
# With complex (dry or imaginary) inputs elements, they act as complex field functions.
For instance `sqrt(dry<double>(-1.0))` returns `I<double>()` value.

[warning In __NT2__, take care that scalar values and dry values do not lead to the same results for some functions.]

[table:id Exponential functions
[[__MATLAB__  ][ __NT2__    ][ Description                                                                    ]]
[[`exp       `][`exp       `][Exponential                                                                     ]]
[[`expm1     `][`expm1     `][Computes exp(x)-1 accurately for small values of x                               ]]
[[`log       `][`log       `][Natural logarithm                                                               ]]
[[`log10     `][`log10     `][Common (base 10) logarithm                                                      ]]
[[`log1p     `][`log1p     `][Computes log(1+x) accurately for small values of x                               ]]
[[`log2      `][`log2      `][Base 2 logarithm and dissect floating-point numbers into exponent and mantissa.

                              In __NT2__ you can also use frexp to dissect floating points.                   ]]
[[`nextpow2  `][`nextpow2  `][Next higher power of 2                                                          ]]
[[`nthroot   `][`nthroot   `][Real nth root of real numbers                                                   ]]
[[`pow2      `][`pow2      `][Base 2 power and scale floating-point numbers.

                             In __NT2__ you can also use `ldexp` to scale floating points and `exp2`
                             to compute base 2 power.

                             `ldexp` has the advantage to scale both real and imaginary parts when applied to
                             complex values.

                              `pow2` as in Matlab discard the imaginary part when called with 2 parameters.   ]]
[[`power     `][`power     `][Power                                                                           ]]
[[`reallog   `][`reallog   `][Natural logarithm for non negative real arrays which asserts on negative elements.

                             In __NT2__ you can use log on real inputs providing Nan values on negatives elements.]]
[[`realpow   `][`realpow   `][Array power for real-only output. In Nt2 you can use use
                              pow on real inputs, to get nan value if the result is not real.                 ]]
[[`realsqrt  `][`realsqrt  `][Square root for nonnegative real arrays which asserts on negative elements.

                             In Nt2 use `sqrt` on real inputs to provide `Nan` values on negatives elements.  ]]
[[`sqrt      `][`sqrt      `][Square root                                                                     ]]
]

[endsect]
