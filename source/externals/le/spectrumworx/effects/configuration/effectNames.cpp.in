////////////////////////////////////////////////////////////////////////////////
///
/// effectNames.cpp
/// ---------------
///
/// Copyright (c) 2011 - 2016. Little Endian Ltd. All rights reserved.
///
////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
#include "allEffects.hpp"
#include "effectNames.hpp"

#include "le/utility/platformSpecifics.hpp"

#include "boost/range/algorithm/find.hpp"
#include "boost/utility/string_ref.hpp"

#pragma warning( push )
#pragma warning( disable : 4512 ) // Assignment operator could not be generated.
#include <array>
#pragma warning( pop )
#include <cstdint>
//------------------------------------------------------------------------------
namespace LE
{
//------------------------------------------------------------------------------
namespace SW
{
//------------------------------------------------------------------------------
namespace Effects
{
//------------------------------------------------------------------------------

LE_OPTIMIZE_FOR_SIZE_BEGIN()

#pragma warning( push )
#pragma warning( disable : 4512 ) // Assignment operator could not be generated.

namespace
{
using EffectNames = std::array<char const * LE_RESTRICT const, @numberOfEffects@>;

LE_MSVC_SPECIFIC( LE_WEAK_SYMBOL_CONST )
EffectNames const effectNames =
{{
@effectNames@
}};

} // anonymous namespace

LE_COLD
char const * LE_FASTCALL effectName( std::uint8_t const effectIndex )
{
    return effectNames[ effectIndex ];
}

LE_COLD
std::int8_t LE_FASTCALL effectIndex( boost::string_ref const effectName )
{
    EffectNames::const_iterator const pFoundEffectName( boost::find( effectNames, effectName ) );
    auto const index( static_cast<std::uint8_t>( pFoundEffectName - effectNames.begin() ) );
    if ( index == effectNames.size() )
        return -1;
    return index;
}

#pragma warning( pop )

LE_OPTIMIZE_FOR_SIZE_END()

//------------------------------------------------------------------------------
} // namespace Effects
//------------------------------------------------------------------------------
} // namespace SW
//------------------------------------------------------------------------------
} // namespace LE
//------------------------------------------------------------------------------
